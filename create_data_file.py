import os
import base64

# --- 설정 ---
# 영상 파일이 저장된 폴더 이름
SOURCE_FOLDER = 'source_videos' 
# 생성할 파이썬 데이터 파일 이름
OUTPUT_FILE = 'multi_video_data.py' 
# 처리할 영상 파일 확장자
VIDEO_EXTENSIONS = ('.mp4', '.mov', '.avi', '.mkv') 

def create_video_data_file():
    """
    SOURCE_FOLDER에 있는 영상 파일들을 읽어 Base64로 인코딩한 후,
    OUTPUT_FILE에 파이썬 딕셔너리 형태로 저장합니다.
    """
    # 소스 폴더가 있는지 확인
    if not os.path.isdir(SOURCE_FOLDER):
        print(f"오류: '{SOURCE_FOLDER}' 폴더를 찾을 수 없습니다.")
        print("영상 파일들을 담을 폴더를 생성해주세요.")
        return

    # 폴더 내에서 비디오 파일 찾기
    video_files = [f for f in os.listdir(SOURCE_FOLDER) if f.lower().endswith(VIDEO_EXTENSIONS)]

    if not video_files:
        print(f"오류: '{SOURCE_FOLDER}' 폴더에 영상 파일이 없습니다.")
        return
        
    print(f"총 {len(video_files)}개의 영상 파일을 찾았습니다. 변환을 시작합니다...")

    # 영상 데이터를 저장할 딕셔너리
    video_data = {}

    # 각 영상 파일을 순회하며 처리
    for filename in video_files:
        # 파일 이름에서 확장자를 제거하여 딕셔너리 키로 사용
        # 예: "city_view.mp4" -> "city_view"
        video_name = os.path.splitext(filename)[0]
        file_path = os.path.join(SOURCE_FOLDER, filename)
        
        print(f"  - 처리 중: {filename} ...")
        
        try:
            # 파일을 바이너리 읽기 모드로 열기
            with open(file_path, 'rb') as f:
                # 파일의 전체 바이너리 데이터를 읽음
                binary_data = f.read()
                # Base64로 인코딩
                base64_encoded_data = base64.b64encode(binary_data)
                # UTF-8 문자열로 변환
                base64_string = base64_encoded_data.decode('utf-8')
                # 딕셔너리에 저장
                video_data[video_name] = base64_string
        except Exception as e:
            print(f"    '{filename}' 파일 처리 중 오류 발생: {e}")
            continue

    # 출력 파일에 쓸 내용 생성
    output_content = "# This file is auto-generated by create_data_file.py\n"
    output_content += "video_data_dict = {\n"
    for name, data in video_data.items():
        # 딕셔너리 형식에 맞게 문자열 추가
        output_content += f"    '{name}': '{data}',\n"
    output_content += "}\n"

    # 출력 파일을 쓰기 모드로 열어 내용 저장
    try:
        with open(OUTPUT_FILE, 'w') as f:
            f.write(output_content)
        print(f"\n성공! '{OUTPUT_FILE}' 파일이 생성되었습니다.")
    except Exception as e:
        print(f"\n오류: '{OUTPUT_FILE}' 파일을 저장하는 중 문제가 발생했습니다: {e}")


if __name__ == '__main__':
    create_video_data_file()
